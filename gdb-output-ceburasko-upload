#!/usr/bin/env python

import re
import argparse

def parse_stack(data):
    def line_generator(data):
        out = ''
        for line in data:
            if line.startswith('#'):
                if out:
                    yield out
                out = line
            else:
                out += ' ' + line
        if out:
            yield out

    sourced_line = re.compile('^#\d+ +(0x[0-9a-fA-F]+ in )?(?P<fn>.+) \([^)]*\) at (?P<file>[^=].*):(?P<line>\d+)')
    no_sourced_line = re.compile('^#\d+ +(0x[0-9a-fA-F]+ in )?(?P<fn>.+) \([^)]*\)')
    for line in line_generator(data):
        result = sourced_line.search(line)
        if result is None:
            result = no_sourced_line.search(line)
        yield result.groupdict()

def crashreport(istream):
    res = {}
    state = 0
    crash = {}
    pattern = re.compile(' +\([^)]*\)?( at .+)?$')
    for line in istream:
        line = line.strip()
        if state == 0:
            if line.startswith("Program terminated"):
                state = 1
                crash['kind'] = line
                continue
        if state == 1:
            crash['line'] = line
            state = 2
            continue
        if state == 2:
            if len(line) == 0:
                state = 3
            continue
        if state == 3:
            if line == crash['line']:
                state = 4
                crash['data'] = []
                # do not continue!
        if state == 4:
            if line:
                crash['data'].append(line)
            else:
                crash['stack'] = list(parse_stack(crash['data']))
                del crash['data']
                del crash['line']
                yield crash
                state = 0
    if 'data' in crash:
        crash['stack'] = list(parse_stack(crash['data']))
        del crash['data']
        del crash['line']
        yield crash

if __name__ == "__main__":
    import sys
    import urllib2
    import yaml

    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('upload_url', 
        help = 'Ceburasko URL for upload crash stack')
    parser.add_argument('--component', default = None)
    parser.add_argument('--version', default = None)
    parser.add_argument('--timeout', type=int, default=10)
    args = parser.parse_args()
    annotation = sys.stdin.read()

    for crash in crashreport(annotation.split('\n')):
        crash['component'] = args.component
        crash['version'] = args.version
        crash['annotation'] = annotation
        try:
            request = urllib2.Request(args.upload_url, yaml.dump(crash), {'Content-Type': 'application/x-yaml'} )
            response = urllib2.urlopen(request, timeout = args.timeout)
        except Exception as e:
            print >>sys.stderr, str(e)
